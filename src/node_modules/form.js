module.exports = form

function form ({ validate, publish }) {
  const el = document.createElement('div')
  el.style = `flex-direction: column; width: 500px; display: flex;`
  el.innerHTML = `
    <h1> generate workshop </h1>
    <input name="title" placeholder="title" value="title1">
    <input name="version" placeholder="version" value="1.0.0">
    <input name="ens_domain" placeholder="ens domain" value="example1.play.eth">
    <input name="icon" placeholder="icon" value="https://upload.wikimedia.org/wikipedia/commons/thumb/8/8f/OOjs_UI_icon_book-ltr.svg/768px-OOjs_UI_icon_book-ltr.svg.png">
    <input name="chat" placeholder="chat" value="https://gitter.im/ethereum/play">
    <div class="lessons"><span><button>add</button><button>del</button></span></div>
    <div class="needs"><span><button>add</button><button>del</button></span></div>
    <div class="unlocks"><span><button>add</button><button>del</button></span></div>
    <button>publish</button>`
  const [,title,version,ens_domain,icon,chat,lessons,needs,unlocks,submit] = el.children
  ;[lessons, needs, unlocks].forEach((inputs, i) => {
    const [add, del] = [...inputs.firstChild.children]
    del.onclick = event => {
      const container = event.target.parentElement.parentElement
      const last = container.children.length - 1
      if (last < 1) return
      container.removeChild(container.children[last])
    }
    add.onclick = event => {
      const container = event.target.parentElement.parentElement
      const input = document.createElement('div')
      if (i === 0) input.innerHTML = `
        <input class="title" placeholder="title" value="lesson-titleX">
        <input class="lesson_url" placeholder="lesson_url" value="https://www.youtube.com/embed/ZnuwB35GYMY">
        <input class="tool_url" placeholder="tool_url" value="https://play.ethereum.org/play-editor">
        <textarea class="info" placeholder="info">foo bar baz</textarea>`
      else if (i === 1) input.innerHTML = `
        <input class="needs_url" placeholder="needs_url" value="https://play.ethereum.org/workshop-solidity">`
      else input.innerHTML = `
        <input class="unlocks_url" placeholder="unlocks_url" value="https://play.ethereum.org/workshop-solidity">`
      container.appendChild(input)
    }
    add.click()
  })
  title.onkeyup = async event => {
    title.style.backgroundColor = await validate('title', title.value) ? 'green' : 'red'
  }
  version.onkeyup = async event => {
    version.style.backgroundColor = await validate('version', version.value) ? 'green' : 'red'
  }
  ens_domain.onkeyup = async event => {
    ens_domain.style.backgroundColor = await validate('ens_domain', ens_domain.value) ? 'green' : 'red'
  }
  icon.onkeyup = async event => {
    icon.style.backgroundColor = await validate('icon', icon.value) ? 'green' : 'red'
  }
  chat.onkeyup = async event => {
    chat.style.backgroundColor = await validate('chat', chat.value) ? 'green' : 'red'
  }
  submit.onclick = event => publish(ens_domain.value, {
    title: title.value,
    version: version.value,
    icon: icon.value,
    chat: chat.value,
    lessons: [...lessons.children].filter((_,i) => i).map(L => {
      const [title, lesson, tool, info] = [...L.children].map(x => x.value)
      return { title, lesson, tool, info: [info] }
    }),
    needs: [...needs.children].filter((_,i) => i).map(L => L.children[0].value),
    unlocks: [...unlocks.children].filter((_,i) => i).map(L => L.children[0].value),
  })
  return el
}
